
//! Autogenerated weights for `pallet_benchmark_example`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-11-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Lohanns-MBP`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_benchmark_example
// --extrinsic=*
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output=pallets/benchmark-example/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_benchmark_example`.
pub trait WeightInfo {
	fn set_value(x: u32, ) -> Weight;
	fn mint(x: u32, ) -> Weight;
}

/// Weights for `pallet_benchmark_example` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `BenchmarkExample::Value` (r:1 w:1)
	/// Proof: `BenchmarkExample::Value` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 1000]`.
	fn set_value(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_133_164, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BenchmarkExample::TotalSupply` (r:1 w:1)
	/// Proof: `BenchmarkExample::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BenchmarkExample::Balance` (r:1 w:1)
	/// Proof: `BenchmarkExample::Balance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 10000]`.
	fn mint(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3469`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_650_184, 3469)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(5_747, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `BenchmarkExample::Value` (r:1 w:1)
	/// Proof: `BenchmarkExample::Value` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 1000]`.
	fn set_value(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_133_164, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BenchmarkExample::TotalSupply` (r:1 w:1)
	/// Proof: `BenchmarkExample::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BenchmarkExample::Balance` (r:1 w:1)
	/// Proof: `BenchmarkExample::Balance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 10000]`.
	fn mint(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3469`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_650_184, 3469)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(5_747, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
